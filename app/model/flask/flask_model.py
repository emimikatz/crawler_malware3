from app.model.flask.malware_flask import Malware
from app.model.flask.ip_flask import IP
from app.model.flask.fs_flask import FS
from app.model.flask.label_flask import Label
from app.model.flask.virustotal_flask import VirusTotal
import gridfs

def malware_model(db):
    malwares = db.malware_collection.find({})
    malwares_to_display = []
    for m in malwares:
        tempMalware = Malware.build_from_json(m)
        print("Malware converted: {0}".format(tempMalware))
        malwares_to_display.append(tempMalware)
    return malwares_to_display

def get_one_malware_model(db, id):
    m = db.malware_collection.find_one({"id_malware": str(id)})
    tempMalware = Malware.build_from_json(m)
    print("Malware converted: {0}".format(tempMalware))
    return tempMalware

def ip_model(db):
    ips = db.ip_collection.find({})
    ips_to_display = []
    for ip in ips:
        tempIP = IP.build_from_json(ip)
        print("IP converted: {0}".format(tempIP))
        ips_to_display.append(tempIP)
    return ips_to_display

def get_one_ip_model(db, id):
    ip = db.ip_collection.find_one({"id_malware_ip": str(id)})
    tempIP = IP.build_from_json(ip)
    print("IP converted: {0}".format(tempIP))
    return tempIP

def vt_model(db):
    vts = db.vt_collection.find({})
    vts_to_display = []
    for vt in vts:
        tempVt = VirusTotal.build_from_json(vt)
        print("VirusTotal converted: {0}".format(tempVt))
        vts_to_display.append(tempVt)
    return vts_to_display

def get_one_vt_model(db, id):
    vt = db.vt_collection.find_one({"id_malware_vt": str(id)})
    tempVT = VirusTotal.build_from_json(vt)
    print("VirusTotal converted: {0}".format(tempVT))
    return tempVT

def label_model(db):
    labels = db.label_collection.find({})
    labels_to_display = []
    for label in labels:
        tempLabel = Label.build_from_json(label)
        print("Label converted: {0}".format(tempLabel))
        labels_to_display.append(tempLabel)
    return labels_to_display

def get_one_label_model(db, id):
    label = db.label_collection.find_one({"id_malware_label": str(id)})
    tempLabel = Label.build_from_json(label)
    print("Label converted: {0}".format(tempLabel))
    return tempLabel

def gridfs_file_model(db):
    fs = gridfs.GridFSBucket(db)
    f_to_display = []
    for f in fs.find():
        tempFS = FS.build_from_GridFS(f)
        print("FS converted: {0}".format(tempFS))
        f_to_display.append(f)
    return f_to_display

def get_malware_from_ip_model(db, ip):
    malware_to_display = []
    cursor_ip = db.ip_collection.find({"address_ip": ip})
    for document_ip in cursor_ip:
        cursor_malware = db.malware_collection.find({"id_malware": document_ip['id_malware_ip']})
        for document_malware in cursor_malware:
            tempMalware = Malware.build_from_json(document_malware)
            print("Malware with ip converted: {0}".format(tempMalware))
            malware_to_display.append(tempMalware)
    return malware_to_display

def get_hash_malware_model(db, type_hash, hash_value):
    column_name = type_hash + "_malware"
    malware_to_display = []
    ip_to_display = []
    cursor_malware = db.malware_collection.find({column_name: hash_value})
    for document_malware in cursor_malware:
        cursor_ip = db.ip_collection.find({"id_malware_ip": document_malware['id_malware']})
        for document_ip in cursor_ip:
            tempMalware = Malware.build_from_json(document_malware)
            print("Malware for hash converted: {0}".format(tempMalware))
            malware_to_display.append(tempMalware)
            tempIP = IP.build_from_json(document_ip)
            print("IP for hash converted: {0}".format(tempIP))
            ip_to_display.append(tempIP)
    return malware_to_display, ip_to_display

def get_label_malware_model(db, label):
    cursor_label = db.label_collection.find({"label": label})
    malware_to_display = []
    for document_label in cursor_label:
        cursor_malware = db.malware_collection.find({"id_malware": document_label['id_malware_label']})
        for document_malware in cursor_malware:
            tempMalware = Malware.build_from_json(document_malware)
            print("Malware for hash converted: {0}".format(tempMalware))
            malware_to_display.append(tempMalware)
    return malware_to_display
