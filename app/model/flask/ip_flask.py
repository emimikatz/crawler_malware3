"""
ip_flask.py
"""
class IP():
    """A class for storing IP information"""

    def __init__(self, id_malware_ip=None, address_ip=None, country_name_ip=None, country_code_ip=None, continent_name_ip=None, continent_code_ip=None, region_name_ip=None, region_code_ip=None, city_ip=None, zip_ip=None, latitude_ip=None, longitude_ip=None, full_report_ip=None):
        self.id_malware_ip = id_malware_ip
        self.address_ip = address_ip
        self.country_name_ip = country_name_ip
        self.country_code_ip = country_code_ip
        self.continent_name_ip = continent_name_ip
        self.continent_code_ip = continent_code_ip
        self.region_name_ip = region_name_ip
        self.region_code_ip = region_code_ip
        self.city_ip = city_ip
        self.zip_ip = zip_ip
        self.latitude_ip = latitude_ip
        self.longitude_ip = longitude_ip
        self.full_report_ip = full_report_ip

    def get_as_json(self):
        """ Method returns the JSON representation of the IP object,
        this can be saved to MongoDB """
        return self.__dict__

    @staticmethod
    def build_from_json(json_data):
        """ Method used to build IP objects from JSON data returned from MongoDB """
        if json_data is not None:
            try:
                return IP(json_data['id_malware_ip'],
                          json_data['address_ip'],
                          json_data['country_name_ip'],
                          json_data['country_code_ip'],
                          json_data['continent_name_ip'],
                          json_data['continent_code_ip'],
                          json_data['region_name_ip'],
                          json_data['region_code_ip'],
                          json_data['city_ip'],
                          json_data['zip_ip'],
                          json_data['latitude_ip'],
                          json_data['longitude_ip'],
                          json_data['full_report_ip'])
            except KeyError as e:
                raise Exception("Key not found in json_data: {}".format(e))
        else:
            raise Exception("No data to create IP from!")
