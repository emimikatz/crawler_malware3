"""
malware_flask.py
"""
class Malware(object):
    """A class for storing Malware information"""

    def __init__(self, id_malware=None, source_malware=None, date_added_malware=None, url_malware=None, url_status_malware=None, threat_malware=None, tags_malware=None, url_haus_malware=None, reporter_malware=None, md5_malware=None, sha256_malware=None, sha1_malware=None, ssdeep_malware=None, is_exe_malware=None, imphash_malware=None, vt_report_malware=None):
        self.id_malware = id_malware
        self.source_malware = source_malware
        self.date_added_malware = date_added_malware
        self.url_malware = url_malware
        self.url_status_malware = url_status_malware
        self.threat_malware = threat_malware
        self.tags_malware = tags_malware
        self.url_haus_malware = url_haus_malware
        self.reporter_malware = reporter_malware
        self.md5_malware = md5_malware
        self.sha256_malware = sha256_malware
        self.sha1_malware = sha1_malware
        self.ssdeep_malware = ssdeep_malware
        self.is_exe_malware = is_exe_malware
        self.imphash_malware = imphash_malware
        self.vt_report_malware = vt_report_malware


    def get_as_json(self):
        """ Method returns the JSON representation of the Malware object,
        this can be saved to MongoDB """
        return self.__dict__


    @staticmethod
    def build_from_json(json_data):
        """ Method used to build Malware objects from JSON data returned from MongoDB """
        if json_data is not None:
            try:
                return Malware(json_data['id_malware'],
                               json_data['source_malware'],
                               json_data['date_added_malware'],
                               json_data['url_malware'],
                               json_data['url_status_malware'],
                               json_data['threat_malware'],
                               json_data['tags_malware'],
                               json_data['url_haus_malware'],
                               json_data['reporter_malware'],
                               json_data['md5_malware'],
                               json_data['sha256_malware'],
                               json_data['sha1_malware'],
                               json_data['ssdeep_malware'],
                               json_data['is_exe_malware'],
                               json_data['imphash_malware'],
                               json_data['vt_report_malware'])
            except KeyError as e:
                raise Exception("Key not found in json_data: {}".format(e))
        else:
            raise Exception("No data to create Malware from!")
